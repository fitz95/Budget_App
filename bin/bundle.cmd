@REM @ruby -x "%~f0" %*
@REM @exit /b %ERRORLEVEL%

@REM #!/usr/bin/env ruby
@REM # frozen_string_literal: true

@REM #
@REM # This file was generated by Bundler.
@REM #
@REM # The application 'bundle' is installed as part of a gem, and
@REM # this file is here to facilitate running it.
@REM #

@REM require "rubygems"

@REM m = Module.new do
@REM   module_function

@REM   def invoked_as_script?
@REM     File.expand_path($0) == File.expand_path(__FILE__)
@REM   end

@REM   def env_var_version
@REM     ENV["BUNDLER_VERSION"]
@REM   end

@REM   def cli_arg_version
@REM     return unless invoked_as_script? # don't want to hijack other binstubs
@REM     return unless "update".start_with?(ARGV.first || " ") # must be running `bundle update`
@REM     bundler_version = nil
@REM     update_index = nil
@REM     ARGV.each_with_index do |a, i|
@REM       if update_index && update_index.succ == i && a =~ Gem::Version::ANCHORED_VERSION_PATTERN
@REM         bundler_version = a
@REM       end
@REM       next unless a =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
@REM       bundler_version = $1
@REM       update_index = i
@REM     end
@REM     bundler_version
@REM   end

@REM   def gemfile
@REM     gemfile = ENV["BUNDLE_GEMFILE"]
@REM     return gemfile if gemfile && !gemfile.empty?

@REM     File.expand_path("../Gemfile", __dir__)
@REM   end

@REM   def lockfile
@REM     lockfile =
@REM       case File.basename(gemfile)
@REM       when "gems.rb" then gemfile.sub(/\.rb$/, ".locked")
@REM       else "#{gemfile}.lock"
@REM       end
@REM     File.expand_path(lockfile)
@REM   end

@REM   def lockfile_version
@REM     return unless File.file?(lockfile)
@REM     lockfile_contents = File.read(lockfile)
@REM     return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/
@REM     Regexp.last_match(1)
@REM   end

@REM   def bundler_requirement
@REM     @bundler_requirement ||=
@REM       env_var_version ||
@REM       cli_arg_version ||
@REM       bundler_requirement_for(lockfile_version)
@REM   end

@REM   def bundler_requirement_for(version)
@REM     return "#{Gem::Requirement.default}.a" unless version

@REM     bundler_gem_version = Gem::Version.new(version)

@REM     bundler_gem_version.approximate_recommendation
@REM   end

@REM   def load_bundler!
@REM     ENV["BUNDLE_GEMFILE"] ||= gemfile

@REM     activate_bundler
@REM   end

@REM   def activate_bundler
@REM     gem_error = activation_error_handling do
@REM       gem "bundler", bundler_requirement
@REM     end
@REM     return if gem_error.nil?
@REM     require_error = activation_error_handling do
@REM       require "bundler/version"
@REM     end
@REM     return if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
@REM     warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
@REM     exit 42
@REM   end

@REM   def activation_error_handling
@REM     yield
@REM     nil
@REM   rescue StandardError, LoadError => e
@REM     e
@REM   end
@REM end

@REM m.load_bundler!

@REM if m.invoked_as_script?
@REM   load Gem.bin_path("bundler", "bundle")
@REM end
